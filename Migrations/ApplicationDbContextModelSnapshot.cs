// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueueSystem.API.Models;

#nullable disable

namespace QueueSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QueueSystem.API.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppointmentDate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = "Sunday 9:00 AM"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = "Sunday 6:00 PM"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = "Wednesday 10:00 AM"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = "Wednesday 7:00 PM"
                        });
                });

            modelBuilder.Entity("QueueSystem.API.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("daa1d023-dc64-4a99-a91f-a2d201b3bef1"),
                            FullName = "Migdam Adil Yousif",
                            Phone = "0928077666",
                            Specification = "Esoteric"
                        },
                        new
                        {
                            Id = new Guid("f3941283-8b99-42df-b4d8-86eb70eb5cc4"),
                            FullName = "Mogtaba Saifaldeen Mohammed",
                            Phone = "0928077888",
                            Specification = "General"
                        });
                });

            modelBuilder.Entity("QueueSystem.API.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41670381-5207-43e3-9596-9f122027a236"),
                            FullName = "Waleed Mohanned Hassan",
                            Gender = "Male",
                            UserName = "Waleed"
                        },
                        new
                        {
                            Id = new Guid("9f3063e2-e89f-4c26-a4be-f6557a0e0d7b"),
                            FullName = "Ahmed Aziz Abas",
                            Gender = "Male",
                            UserName = "Ahmed"
                        },
                        new
                        {
                            Id = new Guid("541b3472-3953-493b-a62b-1fba107ef635"),
                            FullName = "Duaa Nasraldeen Othman",
                            Gender = "Female",
                            UserName = "Duaa"
                        },
                        new
                        {
                            Id = new Guid("4d350a45-21c2-475c-8a4d-cd1463fa8c13"),
                            FullName = "Mujab Nasraldeen Othman",
                            Gender = "Male",
                            UserName = "Mujab"
                        });
                });

            modelBuilder.Entity("QueueSystem.API.Models.PatientAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketReferenceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TicketReferenceId");

                    b.ToTable("PatientAppointments");
                });

            modelBuilder.Entity("QueueSystem.API.Models.PatientAppointment", b =>
                {
                    b.HasOne("QueueSystem.API.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueueSystem.API.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueueSystem.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
